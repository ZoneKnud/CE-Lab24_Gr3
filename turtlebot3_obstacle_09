#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

# Authors: Gilbert #

# import rospy
# import math
# from sensor_msgs.msg import LaserScan
# from geometry_msgs.msg import Twist

import rospy
import math
import time
from random import randrange
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
import sys
import select
import tty
import termios
import math
import requests
import json


from readFromLightSensor import lightSensorRead
# from readFromSonar import sonarSensorRead
from leds import gpioLED


import time
import RPi.GPIO as GPIO


LINEAR_VEL = 0.2
ANGULAR_VEL = 1.5
STOP_DISTANCE = 0.4

COLLISION_DISTANCE = 0.1
CLOSE_DISTANCE = 0.4
MIDDLE_DISTANCE = CLOSE_DISTANCE + 0.1
FAR_DISTANCE = MIDDLE_DISTANCE + 0.2


SPEED_COUNT = 0
SPEED_ACCUMULATION = 0

timestamp = time.time()

running = False
debug = False

# def calculate_speed(min_distance, min_distance_angle):

def Average(lst): 
	bogus_readings = lst.count(5)
	length = len(lst) - bogus_readings
	average = 0
	for i in lst:
		if i != 5:
			average += i

	if length > 0:
		average = average / length
		return average
	else:
		return 0
	

def alltrue(list):
	return all(i == True for i in list)

def allfalse(list):
	return all(i == False for i in list)

def singletrue(list):
	for i in list:
		if i:
			return True
	return False

def mintrue(list, count):
	truecount = 0
	for i in list:
		if i:
			truecount += 1

	if count <= truecount:
		return True
	else:
		return False
	
def minfalse(list, count):
	falsecount = 0
	for i in list:
		if  not i:
			falsecount += 1

	if count <= falsecount:
		return True
	else:
		return False
	
def countfalse(list):
	falsecount = 0
	for i in list:
		if not i:
			falsecount += 1
	
	return falsecount

def truefalse(list):
	truecount = 0
	for i in list:
		if i:
			truecount += 1
	
	return truecount
	


class Obstacle():
	def __init__(self):
		self._cmd_pub = rospy.Publisher('cmd_vel', Twist, queue_size=1)
		self.obstacle()

	def is_key_available(self):
		return select.select([sys.stdin],[],[],0) == ([sys.stdin],[],[])
			
	def get_key(self):
		return sys.stdin.read(1)
		
	def get_scan(self):
		global debug
		# print("get scan called")
		scan = rospy.wait_for_message('scan', LaserScan)
		# print("got scan")
		scan_filter = []
	   
		samples = len(scan.ranges)  # The number of samples is defined in 
									# turtlebot3_<model>.gazebo.xacro file,
									# the default is 360.
  
		scan_filter = scan.ranges

		# print(type(scan_filter))
		scan_filter = list(scan_filter)
		# print(scan_filter)

		# for i in range(samples_view):
		for i in range(samples):
			if scan_filter[i] == float('Inf'):
				scan_filter[i] = 5
			elif scan_filter[i] < 0.001:
				# print("Close to zero!")
				scan_filter[i] = 5
			elif math.isnan(scan_filter[i]):
				print("Yo not a number bro!")
				scan_filter[i] = 5
		if debug:
			time.sleep(0.6)
		else:
			time.sleep(0.01)
		
		return scan_filter
	
	def set_speed(self, twist, linear_speed, angular_Speed):
		global SPEED_COUNT
		global SPEED_ACCUMULATION
		global running
		if running:
			twist.linear.x = linear_speed
			twist.angular.z = angular_Speed
		else:
			twist.linear.x = 0
			twist.angular.z = 0
		# twist.linear.x = 0
		# twist.angular.z = 0
		SPEED_COUNT += 1
		SPEED_ACCUMULATION += linear_speed	

	def full_speed(self, twist):
		self.set_speed(twist, LINEAR_VEL, 0)



	def obstacle(self):
		global running
		global debug
		global LINEAR_VEL
		global ANGULAR_VEL
		# print("hello world")
		twist = Twist()
		
		twist.linear.x = 0.1
		twist.angular.z = 0.0
		self._cmd_pub.publish(twist)		

		lightSensor = lightSensorRead()
		# sonarSensor = sonarSensorRead()

		led = gpioLED(16)
		led.turnOn()

		robot_avoid = False
		future_time_stamp = time.time()

		red_count = 0
		green_count = 0
		blue_count = 0
		rgb_timestamp = 1

		turn_till_clear = [0, False]

		while not rospy.is_shutdown():
			if self.is_key_available():
				char = self.get_key()
				if char.lower() == 'q':
					twist.linear.x = 0.0
					twist.angular.z = 0.0
					self._cmd_pub.publish(twist)
					led.turnOff()
					return
				
				elif char.lower() == 's':
					running = False

				elif char.lower() == 'g':
					running = True

				elif char.lower() == 'd':
					if debug:
						debug = False
						LINEAR_VEL = 0.2
						ANGULAR_VEL = 1.5
					else:
						LINEAR_VEL = 0.07
						ANGULAR_VEL = 0.6
						debug = True


			lidar_distances = self.get_scan()


			cnt_intervals = 24
			angle_range = len(lidar_distances)

			cones = []

			for i in range(0, cnt_intervals):
				index1 = int((angle_range / cnt_intervals) * i)
				index2 = int((angle_range / cnt_intervals) * (i + 1))
				# rospy.loginfo(lidar_distances[index1:index2])

				average = Average(lidar_distances[index1:index2])
				cones.append(average)
				# time.sleep(5)

			# for i, cone in enumerate(cones):
			# 	rospy.loginfo(str(i) + ": " + str(cone))
   			
			lightSensor.getAndUpdateColour()
			# print(lightSensor.currentColor)
			timing = 3
			if rgb_timestamp + timing <= time.time():
				if lightSensor.currentColor == "red":
					red_count +=1
				elif lightSensor.currentColor == "green":
					green_count +=1
				elif lightSensor.currentColor == "blue":
					blue_count += 1
				rgb_timestamp = time.time()

			# speed er linear
   
			close_distances = [0.19, 0.25, 0.32, 0.3, 0.3, 0.32, 0.25, 0.19]
			# middle_distances = [0.19 + 0.06, 0.25 + 0.07, 0.32 + 0.11, 0.3 + 0.1, 0.3 + 0.1, 0.32 + 0.11, 0.25 + 0.07, 0.19 + 0.06]
			middle_distances = [0.19 + 0.09, 0.25 + 0.07, 0.32 + 0.11, 0.3 + 0.1, 0.3 + 0.1, 0.32 + 0.11, 0.25 + 0.07, 0.19 + 0.09]
			sides_close_distance = [0.16, 0.15, 0.15, 0.16]
			sides_middel_distance = [0.16 + 0.08, 0.15 + 0.08, 0.15 + 0.08, 0.16 + 0.08]
			sides_far_distance = [0.16 + 0.08 + 0.07, 0.15 + 0.08 + 0.07, 0.15 + 0.08 + 0.07, 0.16 + 0.08 + 0.07]

			Fcones = cones[20:] + cones[:4]
			Fbclose = []
			Fbmiddle = []

			Lcones = cones[4:8]
			Lbclose = []
			Lbmiddle = []
			Lbfar = []

			Rcones = cones[16:20]
			Rbclose = []
			Rbmiddle = []
			Rbfar = []
			
			for i, cone in enumerate(Fcones):
				if cone < close_distances[i] and cone != 0:
					# print("CLOSE in " + str(i))
					Fbclose.append(True)
				else:
					Fbclose.append(False)
				if cone < middle_distances[i] and cone != 0:
					# print("MIDDLE in " + str(i))
					Fbmiddle.append(True)
				else:
					Fbmiddle.append(False)

			Fbinaries = Fbclose + Fbmiddle

			for i, cone in enumerate(Lcones):
				if cone < sides_close_distance[i] and cone != 0:
					# print("CLOSE in " + str(i))
					Lbclose.append(True)
				else:
					Lbclose.append(False)
				if cone < sides_middel_distance[i] and cone != 0:
					# print("MIDDLE in " + str(i))
					Lbmiddle.append(True)
				else:
					Lbmiddle.append(False)
				if cone < sides_far_distance[i] and cone != 0:
					# print("MIDDLE in " + str(i))
					Lbfar.append(True)
				else:
					Lbfar.append(False)

			for i, cone in enumerate(Rcones):
				if cone < sides_close_distance[i] and cone != 0:
					# print("CLOSE in " + str(i))
					Rbclose.append(True)
				else:
					Rbclose.append(False)
				if cone < sides_middel_distance[i] and cone != 0:
					# print("MIDDLE in " + str(i))
					Rbmiddle.append(True)
				else:
					Rbmiddle.append(False)
				if cone < sides_far_distance[i] and cone != 0:
					# print("MIDDLE in " + str(i))
					Rbfar.append(True)
				else:
					Rbfar.append(False)

			movement_message = ""
			sign = 1

			if turn_till_clear[1]:
				movement_message = "turn_till_clear"
				if minfalse(Fbmiddle,4):
					turn_till_clear[1] = False
					movement_message = "turn_till_clear FULL SPEED"
					self.full_speed(twist)
				else:
					self.set_speed(twist, 0, turn_till_clear[0])

			elif(future_time_stamp > time.time()):
				movement_message = "future_time_stamp"
				if minfalse(Fbmiddle,4):
					future_time_stamp = 1

			else:
				## FULL SPEED ##
				if allfalse(Fbinaries):
					movement_message = "FULL SPEED! 1"
					self.full_speed(twist)

				
				# if close in the outer edge cones in each side. FULL SPEED
				# if Fbclose[0] and Fbclose[7] and all(i == False for i in Fbclose):
				# 	self.set_speed(twist, LINEAR_VEL, 0)

				# if middle outer cones. FULL SPEED
				elif (Fbmiddle[0] or Fbmiddle[7]) and allfalse(Fbmiddle[1:7]):
					movement_message = "FULL SPEED! 2"
					self.full_speed(twist)
				# if CLOSE outer cones. FULL SPEED
				# elif Fbclose[0] and Fbclose[7] and allfalse(Fbclose[1:7]):
				# 	movement_message = "FULL SPEED! 3"
				# 	self.full_speed(twist)

				# if middle 2 outer cones. FULL SPEED
				elif (singletrue(Fbmiddle[:2]) or singletrue(Fbmiddle[6:])) and allfalse(Fbmiddle[2:6]):
					movement_message = "FULL SPEED! 4"
					self.full_speed(twist)
				# if CLOSE 2 outer cones. FULL SPEED
				# elif singletrue(Fbclose[:2]) and singletrue(Fbclose[6:]) and allfalse(Fbclose[2:6]):
				# 	movement_message = "FULL SPEED! 5"
				# 	self.full_speed(twist)

				# if middle 3 outer cones. FULL SPEED
				# elif mintrue(Fbmiddle[:3], 3) or mintrue(Fbmiddle[5:], 3) and allfalse(Fbmiddle[4:5]):
				# 	movement_message = "FULL SPEED! 6"
				# 	self.full_speed(twist)
				# if middle 3 outer cones. FULL SPEED
				# elif mintrue(Fbclose[:3], 2) and mintrue(Fbclose[5:], 2) and allfalse(Fbclose[4:5]):
				# 	movement_message = "FULL SPEED! 7"
				# 	self.full_speed(twist)


				#### NOW WE TURN ####
				elif mintrue(Fbclose[1:7], 5):
					# Look to the sides and back.
					# else turn around.
					# stop turning when clear in front.
	 				if countfalse(Lbfar) < countfalse(Rbfar) and countfalse(Rbfar) < 3:
						movement_message = "Front Blocked  right clear"
						turn_till_clear = [-ANGULAR_VEL, True]
						self.set_speed(twist, 0, -ANGULAR_VEL)
					elif countfalse(Lbfar) > countfalse(Rbfar) and countfalse(Lbfar) < 3:
						movement_message = "Front Blocked  minfalse(Lbmiddle, 2)"
						turn_till_clear = [ANGULAR_VEL, True]
						self.set_speed(twist, 0, ANGULAR_VEL)						

					else:
						## TURN AROUND 180 deg ##
	  					############################## SKAL LAVES BEDRE MED BAK #############3
						movement_message = "BLINDGYDE!"
						turn_till_clear = [-ANGULAR_VEL, True]
						self.set_speed(twist, 0, -ANGULAR_VEL)

				elif alltrue(Fbclose[0:4]):
					movement_message = 'Turn left alltrue(Fbclose[0:4])'
					self.set_speed(twist, LINEAR_VEL / 3,  ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				elif alltrue(Fbclose[4:8]):
					movement_message = 'Turn right alltrue(Fbclose[4:8])'
					self.set_speed(twist, LINEAR_VEL / 3,  -ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				
				elif alltrue(Fbmiddle[0:4]):
					movement_message = 'Turn a bit left alltrue(Fbmiddle[0:4])'
					self.set_speed(twist, LINEAR_VEL * 0.8,  ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.2
				elif alltrue(Fbmiddle[4:8]):
					movement_message = 'Turn a bit right alltrue(Fbmiddle[4:8])'
					self.set_speed(twist, LINEAR_VEL * 0.8,  -ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.2
				
				elif mintrue(Fbclose[0:4], 3):
					movement_message = 'Turn left alltrue(Fbclose[0:4])'
					self.set_speed(twist, LINEAR_VEL / 3,  ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				elif mintrue(Fbclose[4:8], 3):
					movement_message = 'Turn right alltrue(Fbclose[4:8])'
					self.set_speed(twist, LINEAR_VEL / 3,  -ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				


				# The two center cones.
				elif alltrue(Fbclose[3:5]):
					# Check cones leangere ude.
	 				if Fbclose[5]:
						movement_message = 'Turn right alltrue(Fbclose[3:5])'
						self.set_speed(twist, -LINEAR_VEL / 4, -ANGULAR_VEL)
					else:
						movement_message = 'Turn left alltrue(Fbclose[3:5])'
						self.set_speed(twist, -LINEAR_VEL / 4, ANGULAR_VEL)
					future_time_stamp = time.time() + 0.3
				elif alltrue(Fbclose[2:4]):
					movement_message = 'Turn left alltrue(Fbclose[2:4])'
					self.set_speed(twist, LINEAR_VEL / 6, ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				elif alltrue(Fbclose[4:6]):
					movement_message = 'Turn right alltrue(Fbclose[4:6])'
					self.set_speed(twist, LINEAR_VEL / 6, -ANGULAR_VEL)
					future_time_stamp = time.time() + 0.2
				
				elif singletrue(Fbclose[5:7]):
					movement_message = 'Turn right singletrue(Fbclose[5:7])'
					self.set_speed(twist, LINEAR_VEL / 2, -ANGULAR_VEL * 0.5)
					# future_time_stamp = time.time() + 0.2
				elif singletrue(Fbclose[1:3]):
					movement_message = 'Turn left singletrue(Fbclose[1:3])'
					self.set_speed(twist, LINEAR_VEL / 2, ANGULAR_VEL * 0.5)
					# future_time_stamp = time.time() + 0.2
					
				

				elif alltrue(Fbmiddle[3:5]):
					if Fbmiddle[5]:
						movement_message = 'Turn a bit right alltrue(Fbmiddle[3:5])'
						self.set_speed(twist, LINEAR_VEL / 3, -ANGULAR_VEL)
					else:
						movement_message = 'Turn a bit left alltrue(Fbmiddle[3:5])'
						self.set_speed(twist, LINEAR_VEL / 3, ANGULAR_VEL)
					
					future_time_stamp = time.time() + 0.1
				elif alltrue(Fbmiddle[2:4]):
					movement_message = 'Turn a bit left alltrue(Fbmiddle[2:4])'
					self.set_speed(twist, LINEAR_VEL * 0.8, ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.1
				elif alltrue(Fbmiddle[4:6]):
					movement_message = 'Turn a bit right alltrue(Fbmiddle[4:6])'
					self.set_speed(twist, LINEAR_VEL * 0.8,  -ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.1
				
				elif singletrue(Fbmiddle[3:5]):
					if Fbmiddle[5]:
						movement_message = 'Turn a bit right singletrue(Fbmiddle[3:5])'
						self.set_speed(twist, LINEAR_VEL / 3, -ANGULAR_VEL)
					else:
						movement_message = 'Turn a bit left singletrue(Fbmiddle[3:5])'
						self.set_speed(twist, LINEAR_VEL / 3, ANGULAR_VEL)
					
					future_time_stamp = time.time() + 0.1
				elif singletrue(Fbmiddle[2:4]):
					movement_message = 'Turn a bit left singletrue(Fbmiddle[2:4])'
					self.set_speed(twist, LINEAR_VEL * 0.8, ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.1
				elif singletrue(Fbmiddle[4:6]):
					movement_message = 'Turn a bit right singletrue(Fbmiddle[4:6])'
					self.set_speed(twist, LINEAR_VEL * 0.8,  -ANGULAR_VEL / 3)
					future_time_stamp = time.time() + 0.1

				
				
	

				# if MIDDLE 2 outer cones. Turn a little
				elif alltrue(Fbmiddle[:2]) or alltrue(Fbmiddle[6:]):
					movement_message = '2 outer cones MIDDLE alltrue(Fbmiddle[:2]) or alltrue(Fbmiddle[6:])'
					if Fbmiddle[7]:
						sign = -1
					self.set_speed(twist, LINEAR_VEL, sign * ANGULAR_VEL / 2)
				# if CLOSE 2 outer cones. Turn more
				elif singletrue(Fbclose[:2]) or singletrue(Fbclose[6:]):
					# index = cones.index() # Giver 0, 1 eller 2.
					movement_message = '2 outer cones CLOSE alltrue(Fbclose[:2]) or alltrue(Fbclose[6:])'
					if Fbclose[7]:
						sign = -1
					self.set_speed(twist, LINEAR_VEL, sign * ANGULAR_VEL)
	

				# if middle 3 outer cones. Turn a little more.
				elif singletrue(Fbmiddle[:3]) or singletrue(Fbmiddle[5:]):
					movement_message = '3 outer cones MIDDLE alltrue(Fbclose[:2]) or alltrue(Fbclose[6:])'
					if singletrue(Fbmiddle[5:]):
						sign = -1
					self.set_speed(twist, LINEAR_VEL, sign * ANGULAR_VEL / 1.5)
				# if CLOSE 3 outer cones. Turn more.
				elif singletrue(Fbclose[:3]) or singletrue(Fbclose[5:]):
					movement_message = '3 outer cones CLOSE alltrue(Fbclose[:2]) or alltrue(Fbclose[6:])'
					if singletrue(Fbclose[5:]):
						sign = -1
					self.set_speed(twist, LINEAR_VEL, sign * ANGULAR_VEL)

				else:
					movement_message = "ELSE (full speed)" + str(Fbinaries)
					self.full_speed(twist)

				# elif 
































				

			# angular er den inverse

			averages = []
			# find gennemsnittet af de foreste.
   
			averages.append(Average(cones[20:22]))
			averages.append((cones[0] + cones[23]) / 2)
			averages.append(Average(cones[:3]))

			binaries = []

			# ####################################

			if averages[0] < CLOSE_DISTANCE:
				# Vi vil gerne have at den drejer lidt mod venstre
				binaries.append(True)
			else:
				binaries.append(False)
			
			if averages[1] < CLOSE_DISTANCE:
				binaries.append(True)
			else:
				binaries.append(False)
			
			if averages[2] < CLOSE_DISTANCE:
				binaries.append(True)
			else:
				binaries.append(False)

			# #####################################

			if cones[22] < CLOSE_DISTANCE + 0.1:
				# Vi vil gerne have at den drejer lidt mod venstre
				binaries.append(True)
			else:
				binaries.append(False)
			
			if min([cones[0], cones[23]]) < CLOSE_DISTANCE + 0.2:
				binaries.append(True)
			else:
				binaries.append(False)
			
			if cones[1] < CLOSE_DISTANCE + 0.1:
				binaries.append(True)
			else:
				binaries.append(False)

			# print(binaries)

			# ####### Movement logic ###########
   
			# if(future_time_stamp < time.time()):
			# 	if min(cones[19:23]) < COLLISION_DISTANCE and min(cones[19:23]) != 0 or min(cones[:4]) < COLLISION_DISTANCE and min(cones[:4]) != 0:
			# 		movement_message = "COLLISION!"
			# 		self.set_speed(twist, -LINEAR_VEL, 0)
			# 		robot_avoid = True
			# 		future_time_stamp = time.time() + 0.7

			# 		sign = 1
			# 		if cones[0] < cones[23]:
			# 			sign = -1

			# 		# Calculate the angular and linear speed:
			# 		linear_speed = LINEAR_VEL / 9
			# 		# If linear speed is high, then angular speed needs to be low.
			# 		angular_speed = sign * (ANGULAR_VEL)

			# 		self.set_speed(twist, linear_speed, angular_speed)

			# 	elif binaries[0] and binaries[1] and binaries[2]:
			# 		movement_message = "Something VERY CLOSE turn around!"
			# 		# Turn hard
			# 		self.set_speed(twist, 0, ANGULAR_VEL)
			# 		self._cmd_pub.publish(twist)
			# 		future_time_stamp = time.time() + 1

			# 	elif binaries[0] and binaries[1]:
			# 		movement_message = "Something CLOSE to the right, turn!"
			# 		# Turn to the left sharp
			# 		self.set_speed(twist, -LINEAR_VEL / 6, ANGULAR_VEL)
			# 		self._cmd_pub.publish(twist)
			# 		future_time_stamp = time.time() + 0.3

			# 	elif binaries[1] and binaries[2]:
			# 		movement_message = "Something CLOSE to the left, turn!"
			# 		# Turn to the right sharp
			# 		self.set_speed(twist, -LINEAR_VEL / 6, ANGULAR_VEL)
			# 		self._cmd_pub.publish(twist)
			# 		future_time_stamp = time.time() + 0.3
					
				
			# 	elif binaries[0]:
			# 		movement_message = "Something close to the right, turn a little!"
			# 		index = cones.index(min(cones[20:23])) # Giver 0, 1 eller 2.
			# 		index -= 20
			# 		# Calculate the angular and linear speed:
			# 		linear_speed = LINEAR_VEL - ((LINEAR_VEL / 9) * (3- index))
			# 		# If linear speed is high, then angular speed needs to be low.
			# 		angular_speed = ANGULAR_VEL - ((ANGULAR_VEL / 6) * (3- index))

			# 		self.set_speed(twist, linear_speed, angular_speed)
			# 		# print(index)

			# 	elif binaries[1]:
			# 		movement_message = "Something close in front, turn!"
			# 		sign = 1
			# 		if cones[0] < cones[23]:
			# 			sign = -1

			# 		# Calculate the angular and linear speed:
			# 		linear_speed = LINEAR_VEL / 9
			# 		# If linear speed is high, then angular speed needs to be low.
			# 		angular_speed = sign * (ANGULAR_VEL)

			# 		self.set_speed(twist, linear_speed, angular_speed)

			# 	elif binaries[2]:
			# 		movement_message = "Something close to the left, turn a little!"
			# 		reverse = cones[:3]
			# 		reverse.reverse()
			# 		# print(cones[:3])
			# 		# print(reverse)
			# 		# print(min(reverse))
			# 		index = reverse.index(min(reverse)) # Giver 0, 1 eller 2
			# 		# Calculate the angular and linear speed:
			# 		linear_speed = LINEAR_VEL - ((LINEAR_VEL / 9) * (3- index))
			# 		# If linear speed is high, then angular speed needs to be low.
			# 		angular_speed = -ANGULAR_VEL - ((ANGULAR_VEL / 6) * (3- index))

			# 		self.set_speed(twist, linear_speed, angular_speed)
				
			# 	################### MIDDLE_DISTANCE ####################
	

			# 	# 2,1,0
			# 	# 5,4,3
			# 	# if binaries[0] and binaries[1] and binaries[2]:
			# 	# 	# Turn hard
			# 	# 	twist.linear.x = 0
			# 	# 	twist.angular.z = ANGULAR_VEL
			# 	# 	self._cmd_pub.publish(twist)
			# 	# 	time.sleep(1)

			# 	elif binaries[3] and binaries[4]:
			# 		movement_message = "Something middleclose to the right, turn a little!"
			# 		# Turn to the left
			# 		self.set_speed(twist, LINEAR_VEL, ANGULAR_VEL / 6)
			# 		self._cmd_pub.publish(twist)

			# 	elif binaries[4] and binaries[5]:
			# 		movement_message = "Something middleclose to the left, turn a little!"
			# 		# Turn to the right
			# 		self.set_speed(twist, LINEAR_VEL, -ANGULAR_VEL / 6)
			# 		self._cmd_pub.publish(twist)

			# 	else:
			# 		movement_message = "FULL SPEED!"
			# 		self.set_speed(twist, LINEAR_VEL, 0)


			####### Send data to server ###########
			data_to_send = cones + binaries + [lightSensor.currentColor] + [red_count, green_count, blue_count] + [movement_message] + Fbinaries
			# data_to_send = cones + binaries + ["yellow"] + [red_count, green_count, blue_count] + [movement_message] + Fbinaries

			r = requests.post('http://192.168.137.1:5000/receive_data', json={"data": json.dumps(data_to_send)})

			print(lightSensor.currentColor)
			print("linear: " + str(twist.linear.x))
			print("angular: " + str(twist.angular.z))

			# print(Fbclose)
			# print(Fbmiddle)
			# print("average speed: " + str(SPEED_ACCUMULATION / SPEED_COUNT))
			# print("Red Color Counts:" + str(red_count))
			# print("Green Color Counts:" + str(green_count))
			# print("Blue Color Counts:" + str(blue_count))

			self._cmd_pub.publish(twist)
			turtlebot_moving = True


def main():
	rospy.init_node('turtlebot3_obstacle')
	try:
		obstacle = Obstacle()
	except rospy.ROSInterruptException:
		pass

if __name__ == '__main__':
	main()

